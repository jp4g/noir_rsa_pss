{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":6219865386057728221,"abi":{"parameters":[{"name":"hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"redc_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"61":{"source":"use bignum::params::BigNumParams;\nuse rsa::{rsa::verify_sha256_pss, types::RBN2048};\n\n// Examples of the signature limbs, modulus, and redc params can be generated via\n// ../../signature_gen/main.rs.\n// Note: technically, the `signature` could've been passed into `main` directly,\n// for a much cleaner interface.\n// The reason we chose this more verbose approach here, was to reduce the amount of\n// data to generate for the Prover.toml file.\nfn main(\n    hash: [u8; 32],\n    signature_limbs: [u128; 18],\n    modulus_limbs: [u128; 18],\n    redc_limbs: [u128; 18],\n) {\n    let has_multiplicative_inverse = false;\n    let params: BigNumParams<18, 2048> =\n        BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n    let signature: RBN2048 = RBN2048::from_array(params, signature_limbs);\n\n    assert(verify_sha256_pss(hash, signature, 2048));\n}\n\n#[test]\nfn test_main() {\n    // Output of `cargo run -- --msg \"hello world\"` in the `signature_gen` directory\n    // Create runtime params:\n    let modulus_limbs = [\n        0x83e879145bffccbe4d783abeca8999,\n        0xb7d9868f5b915b43f6c6a8193a1a4f,\n        0x67f95badedef107f0998ab3d52961e,\n        0x7dcc9780ac8d71c6b49bbfeca25f0,\n        0xf9fdced289a3d4f62830681be65b50,\n        0x986aa8fe98888e9f609af97515b036,\n        0xd494bc65f4608849a6ed8cf5cb82ed,\n        0x18ca508b8353e676387d22667e4adb,\n        0x9d3fcb816b4763099ccbb7416a7ad,\n        0xcfd89fee1ffcfa5f2243c92e3908b7,\n        0xcaf320fbb34158238b41042f9c6386,\n        0xb3df0cd5dee269ecec61b342880c59,\n        0x2134236dc67b59df001cac48181625,\n        0x536d424ce3dcaf2b3c15eba3ceb98,\n        0x7c6532647de2f025c4245c4a816ea9,\n        0x1ca6b6ac38706f61dd460c53293c88,\n        0x812b9256f612815edb22ec614a6c89,\n        0xc9,\n    ];\n    let redc_limbs = [\n        0x9ec08341171d384b92ed35848dac43,\n        0xaa5e7059598102ad1d99f33e533781,\n        0x894978a6e54a780efd6c579b74dd3f,\n        0x9531219036eb346dc4d2f142d9aeb3,\n        0x2d67220edac65500daea360896b937,\n        0x72393de3ce76a185b8d5fe4efeb301,\n        0x2e5a676dc2d3d971ead0a1a8127ff1,\n        0xbb92e11f4b88fb1f478a8e5fcc8a63,\n        0x978205931de77dc276cbffcfa9ab06,\n        0x3f0074f27a70de9b87b38923c5d26f,\n        0x315d3964500ad7da70267bebb13aed,\n        0xee04558c06aced97c3375cb93ae624,\n        0xcaf9c90ec5317baf27dabd3f3a6018,\n        0x453a832dd0cf10c2e7669123ffdabe,\n        0xc6c46372e3eda40f2582e2e9902867,\n        0xcdb6b9ecb85a01524cbe4cee82a2c2,\n        0xbbaa5920d526e092f29b41b1c629e1,\n        0x1453,\n    ];\n\n    let signature_limbs = [\n        0x2e3f7f3a3b7d89cbf680adcee4f039,\n        0xcca286445a216e1c110416099710f3,\n        0x0684d04d7773fbff2223360e314f47,\n        0x1342e7d3f7cadd18ba5f0ed57b1e54,\n        0xe5347fc80630780900cffe3d20cb7d,\n        0xda578cadd719f2a38f505d54c46203,\n        0x4a729fdd97383a0e32b5e8f671c833,\n        0x810ea2ce9ace9bd072bd3b221c9b62,\n        0xc565d6bff72c8501a729ecab2aee3b,\n        0xe042b627c4e6b4cc6ab4ca0ababaaa,\n        0x8e707750c71a4f9f0b9d9389b61826,\n        0x850297f956c58dafb6bf4f7bb049fa,\n        0x32c51e7454edae060725c509d9a48c,\n        0xbe2f1df6227e67dc61e6ab82bc501f,\n        0xea17c90cc7053bbb94ddfac6b1a405,\n        0x6c6eaada9c24dfa1a476c3718f6735,\n        0x0134b376c64ba2a79a086061573792,\n        0x22,\n    ];\n\n    // let hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    // hash of the jwt\n    let hash: [u8; 32] = [\n        190, 196, 184, 50, 102, 89, 57, 43, 211, 245, 140, 168, 170, 163, 80, 128, 25, 139, 25, 68,\n        239, 215, 154, 164, 148, 234, 47, 212, 6, 140, 157, 110,\n    ];\n\n    main(hash, signature_limbs, modulus_limbs, redc_limbs);\n}\n","path":"/Users/ianbrighton/Documents/Mach34/open_banking/noir_rsa_pss/example_pss/src/main.nr"},"96":{"source":"use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\nuse std::cmp::Ordering;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n * gt \n * check_gt_with_flags\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (underflow, result, carry_flags, borrow_flags) =\n        unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n    assert(!underflow, \"BigNum::validate_gt check fails\");\n    check_gt_with_flags::<N, MOD_BITS>(lhs, rhs, result, borrow_flags, carry_flags);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n\n// a comparison function. returns true if lhs > rhs and false otherwise\npub(crate) fn cmp<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) -> Ordering {\n    let (underflow, result, carry_flags, borrow_flags) =\n        unsafe { __validate_gt_remainder(lhs, rhs) };\n    // if underflow is true, swap lhs and rhs\n    let (lhs, rhs) = if underflow { (rhs, lhs) } else { (lhs, rhs) };\n    check_gt_with_flags::<N, MOD_BITS>(lhs, rhs, result, borrow_flags, carry_flags);\n    if lhs == rhs {\n        Ordering::equal()\n    } else if underflow {\n        Ordering::less()\n    } else {\n        Ordering::greater()\n    }\n}\n\n// the constraining function for the results returned by __validate_gt_remainder. this is used in both comparisons and validate gt\npub(crate) fn check_gt_with_flags<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    result: [u128; N],\n    borrow_flags: [bool; N],\n    carry_flags: [bool; N],\n) {\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i] as Field\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1] as Field\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/constrained_ops.nr"},"97":{"source":"use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N - 2]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N - 2] = [0; 2 * N - 2];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N - 2]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/expressions.nr"},"99":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [u128; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result: [u128; N] = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: u128 = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as u128;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: u128 = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as u128;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [u128; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = (val[i] as Field).to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = (val[N - 1] as Field).to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/serialization.nr"},"100":{"source":"use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> (bool, [u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n\n    let mut result: [u128; N] = [0; N];\n    // swap a and b if there's an underflow\n    let (a, b) = if underflow { (b, a) } else { (a, b) };\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (underflow, result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N - 1]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        if (i < N - 1) {\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N - 1], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            if (i < N - 1) {\n                borrow_flags[i] = borrow as bool;\n            }\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N - 1], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            if (i < N - 1) {\n                borrow_flags[i] = borrow as bool;\n            }\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/unconstrained_helpers.nr"},"101":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/unconstrained_ops.nr"},"103":{"source":"pub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [u128; N],\n\n    // @brief double_modulus: used when performing negations and subtractions\n    // @note we borrow 1 from the last limb. This is for easing up the operations that might underflow\n    pub double_modulus: [u128; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [u128; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [u128; N],\n        redc_param: [u128; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [u128; N]) -> [u128; N] {\n    let TWO_POW_120: u128 = 0x1000000000000000000000000000000;\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (modulus[i] + modulus[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/params.nr"},"104":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, cmp, conditional_select, derive_from_seed, div, eq, is_zero, mul,\n        neg, sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::{cmp::Ordering, ops::Neg};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [u128; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {\n\n    pub fn zero(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [u128; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::zero(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [u128; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    pub fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    pub fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    pub fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    pub fn get_limbs(self) -> [u128; N] {\n        self.limbs\n    }\n\n    pub fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    pub fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    pub unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    pub unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    pub unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    pub fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    pub fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    pub fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    pub fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    pub fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    pub fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::cmp::Ord for RuntimeBigNum<N, MOD_BITS> {\n    fn cmp(self, other: Self) -> Ordering {\n        assert(self.params == other.params);\n        cmp::<_, MOD_BITS>(self.limbs, other.limbs)\n    }\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/runtime_bignum.nr"},"111":{"source":"use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/utils/split_bits.nr"},"113":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\npub fn verify_sha256_pss<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    key_size: u32,\n) -> bool {\n    // Exponentiate the signature assuming e = 65537\n    let mut exponentiated = sig * sig;\n    for _ in 0..15 {\n        exponentiated = exponentiated * exponentiated;\n    }\n    exponentiated = exponentiated * sig;\n\n    // Convert the exponentiated signature to a byte array and reverse it to\n    // get it in big endian order, which is much easier to work with for\n    // the rest of the verification process\n    let em: [u8; ModBits / 8] = reverse_array(exponentiated.to_le_bytes());\n\n    // The modulus size in bits minus 1\n    let em_bits = key_size - 1;\n    // The actual length of the encoded message without any of the leftmost 0s\n    let em_len = (em_bits + 7) / 8;\n    // The length of the modulus in bytes\n    let key_len = (key_size + 7) / 8;\n    let h_len = 32;\n    let s_len = 32;\n\n    // Check if emLen < hLen + sLen + 2\n    assert(em_len >= h_len + s_len + 2);\n\n    // Check if eM ends with 0xBC\n    assert_eq(em[em.len() - 1], 0xBC);\n\n    let db_mask_len = em_len - h_len - 1;\n    // In some rare cases, em_len is not equal to key_len (e.g. 1025 bit RSA)\n    // In this case, we'll have a leading zero byte in em that we need to ignore\n    // c.f. https://github.com/RustCrypto/RSA/blob/aeedb5adf5297892fcb9e11f7c0f6c0157005c58/src/algorithms/pss.rs#L242\n    let offset = key_len - em_len;\n    // As the hash is 32 bytes and we also remove the 0xBC at the end, we have up to NumBytes - 33 bytes left for DB\n    // For example, for 2048 bit RSA (i.e. 256 bytes), we have 256 - 33 = 223 bytes left for DB\n    // and for 1024 bit RSA (i.e. 128 bytes), we have 128 - 33 = 95 bytes left for DB\n    let masked_db: [u8; (ModBits / 8) - 33] = get_array_slice(em, offset, db_mask_len + offset);\n    let h = get_array_slice(em, db_mask_len + offset, em.len() - 1);\n\n    // Make sure the 8 * em_len - em_bits leftmost bits are 0\n    // c.f. https://github.com/RustCrypto/RSA/blob/aeedb5adf5297892fcb9e11f7c0f6c0157005c58/src/algorithms/pss.rs#L205\n    let bits_to_mask = 8 - (8 * em_len - em_bits);\n    let mask_value = pow(2, bits_to_mask as u32);\n    assert_eq(masked_db[0] as u32 / mask_value, 0);\n\n    // Generate dbMask using MGF1\n    let db_mask: [u8; (ModBits / 8) - 33] = mgf1_sha256(h);\n\n    // Compute DB = maskedDB xor dbMask\n    let mut db = [0 as u8; (ModBits / 8) - 33];\n    for i in 0..db_mask_len {\n        db[i] = masked_db[i] ^ db_mask[i];\n    }\n\n    // Set leftmost byte of DB to 0\n    db[0] = 0;\n\n    // Check if the leftmost octets of DB are zero\n    for i in 0..(em_len - h_len - s_len - 2) {\n        assert_eq(db[i], 0);\n    }\n\n    // Check if the octet at position emLen - hLen - sLen - 2 is 1\n    assert_eq(db[em_len - h_len - s_len - 2], 1);\n\n    // Extract salt\n    let salt: [u8; 32] = get_array_slice(db, db_mask_len - s_len, db_mask_len);\n\n    // Construct M'\n    // M' = (0x)00 00 00 00 00 00 00 00 || msg_hash || salt\n    let mut m_prime = [0 as u8; 72]; // 8 + h_len + s_len\n    for i in 8..40 {\n        m_prime[i] = msg_hash[i - 8];\n    }\n    for i in 40..72 {\n        m_prime[i] = salt[i - 40];\n    }\n\n    // Compute H'\n    let h_prime = dep::std::hash::sha256(m_prime);\n\n    // Compare H and H'\n    h == h_prime\n}\n\nfn reverse_array<let N: u32>(array: [u8; N]) -> [u8; N] {\n    let mut reversed = [0 as u8; N];\n    for i in 0..N {\n        reversed[i] = array[N - i - 1];\n    }\n    reversed\n}\n\nfn get_array_slice<let N: u32, let M: u32>(array: [u8; N], start: u32, end: u32) -> [u8; M] {\n    assert(end - start <= M);\n    let mut slice = [0 as u8; M];\n    for i in 0..M {\n        if i < end - start {\n            slice[i] = array[start + i];\n        }\n    }\n    slice\n}\n\nfn pow(base: u32, exp: u32) -> u32 {\n    let mut result = 1;\n    for _ in 0..exp {\n        result *= base;\n    }\n    result\n}\n\nglobal HASH_LEN: u32 = 32;\n\n/**\n * @brief Generate a mask from a seed using the MGF1 algorithm with SHA256 as the hash function\n **/\nfn mgf1_sha256<let SEED_LEN: u32, let MASK_LEN: u32>(seed: [u8; SEED_LEN]) -> [u8; MASK_LEN] {\n    // MASK_LEN must be less than 2^32 * HASH_LEN\n    std::field::bn254::assert_lt(MASK_LEN as Field, 0xffffffff * HASH_LEN as Field + 1);\n\n    // HASH_LEN bytes are added at each iteration and there is at least 1 iteration\n    // so if HASH_LEN is not enough to fill MASK_LEN bytes in one iteration,\n    // another one is required and so on.\n    let iterations = (MASK_LEN / HASH_LEN) + 1;\n\n    let mut mask: [u8; MASK_LEN] = [0; MASK_LEN];\n    let mut hashed: [u8; HASH_LEN] = [0; HASH_LEN];\n\n    for i in 0..iterations {\n        let mut block: [u8; SEED_LEN + 4] = [0; SEED_LEN + 4];\n\n        // Copy seed to block\n        for j in 0..SEED_LEN {\n            block[j] = seed[j];\n        }\n\n        // Add counter to block\n        let counter_bytes: [u8; 4] = (i as Field).to_be_bytes();\n        for j in 0..4 {\n            block[SEED_LEN + j] = counter_bytes[j];\n        }\n\n        // Hash the block\n        // First SEED_LEN bytes are the seed, next 4 bytes are the counter\n        hashed = dep::std::hash::sha256_var(block, SEED_LEN as u64 + 4);\n\n        // Copy hashed output to mask\n        for j in 0..HASH_LEN {\n            if i * HASH_LEN + j < MASK_LEN {\n                mask[i * HASH_LEN + j] = hashed[j];\n            }\n        }\n    }\n\n    mask\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n\n#[test]\nfn test_mgf1_sha256() {\n    let seed: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let expected_mask: [u8; 32] = [\n        106, 93, 232, 46, 236, 203, 51, 228, 103, 104, 145, 29, 197, 74, 26, 194, 135, 200, 40, 232,\n        179, 172, 220, 135, 51, 185, 209, 35, 194, 131, 176, 190,\n    ];\n    let mask: [u8; 32] = mgf1_sha256(seed);\n    assert(mask == expected_mask);\n}\n\n#[test]\nfn test_verify_sha256_pss_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x45648f4ade2ac1f40c18b44a2951ad,\n            0xd558cced315cbced65532e416ab0ea,\n            0x67c3818b41ed79f0e9e06b10b31a39,\n            0x9bb9db99001fe165b2a18bfb8ff423,\n            0xc792c2037f2abe206bdc987898a73b,\n            0x6630acf8743e8ffca5199b195d2e32,\n            0xbffc9f0464184da3de5f0efa5a705b,\n            0xe14bd49bd3ec93d8f3e84f47a32e6d,\n            0x2d6abfec39882cd67f7804b9ff278e,\n            0x1140883fa39129d297ebee534cdf58,\n            0x96bc387e08849589aa1dda5d381cd2,\n            0x31c60ecdf4d3c1119814b724779a9e,\n            0x1a4882267e3e2e6074b40448d62087,\n            0x9e015854d57eae42e5b515d357a755,\n            0xb593f8dfc8434f32d7d30277b1abc,\n            0x4e7184b54966a30552fc92df470aa,\n            0xa8a3c9172762978b03464671f8288e,\n            0xba,\n        ],\n        [\n            0x1c63831dbaa98693ab59ca2ae5a88,\n            0x3e67cf06ca2556701f3aa8d158552,\n            0x7c63171078a831165ed8b2dd116675,\n            0x9e1f1bca55d0e220e58ddbbb387972,\n            0xd7c72f20722cc7af897d5819424801,\n            0xf0434a631cffe4c4d56874bff93661,\n            0x8767e83f45cfff15cca95d5dc6f48c,\n            0xf210d697748e9ad45c0f7c3ed3bda8,\n            0xc960d59cb9dd48d50e12c2ef04dda2,\n            0xbf07cf1ecc532686848dca09d061c2,\n            0xc491a60be200f9574ad6aa31977a4f,\n            0x67681170f25ab2aff941b18e21e1bd,\n            0xc485fc6deda1ba84f2bfcfbea2c044,\n            0x776bc3eac3728ec7f85ca2496ee8e4,\n            0x4d82eeb8ecdc1ec53280fce96c05e,\n            0x514088d39ff1cae50d2f67db91458f,\n            0x9c1553de9eef61a83b288c4d11610e,\n            0x15f1,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xcce57aaed9eed21edef9d96d9ebdf8,\n            0x181f152657736ea458462ff45b1d81,\n            0x9df8c00fefe67c3a727c1f84641d2a,\n            0xe3bb299609d4f4bfe7e979123f6962,\n            0x6cf987c686983f184262419dc8d64b,\n            0xedc086f713d60c9d661a4e7fdae380,\n            0xb95ada34d5b9217d9eaa89d1d7a3d1,\n            0xec275d1d4e3e74296eab26318df81f,\n            0x3c943e2d3e12f1394952de70d92ac9,\n            0x4a4e8a625138a533b9b71cbb03c991,\n            0xa5379dfc363e79c5a55ad71a01948e,\n            0x9340e047e0d4be67ac7f1517fe2673,\n            0xdf2606ac8cbbcad391c5e925bf5082,\n            0x249690032f10b7986e7edbb8ec0d6a,\n            0x8c07da4fbed69ab71f127fb5edf73c,\n            0x64aefd403b6a4353ebdc9b7fce82bc,\n            0x5ecc107633bc4cc1a3adb545b474de,\n            0x7b,\n        ],\n    };\n\n    assert(verify_sha256_pss(sha256_hash, signature, 2048));\n}\n\n#[test]\nfn test_verify_sha256_pss_4096() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let params: BigNumParams<35, 4096> = BigNumParams::new(\n        false,\n        [\n            0xa6222b52f49e7258fe4fee04ea2d9,\n            0x2fd64c9fce4dba1e003e9b0947ee34,\n            0xf46a24f43be90f258013ba55794c6a,\n            0xda8100ed967a7577f4144295e37b68,\n            0x8545db58ed5cb1a78661a725c2e2df,\n            0xfc1673fba9882dc0c1bf1ebd95e9a7,\n            0xf8863f5481969b504d93ec7b3634f,\n            0xafedf06a9d7583f1c06b2ee8a1f2b8,\n            0x375c3f57b70cb7fc6b934445a97ebe,\n            0xd89ad291b95a70bf4922b45d2efff8,\n            0x2bf000f6408944083d93e45030e827,\n            0xf55cb42313719c7a2bfa07b3eb1ed4,\n            0x6d8656a0f3b41fa1a717140dc5ce90,\n            0x404b10d983681bd3f9ed1534d5bfa2,\n            0xced48aead2b9ba16f08a0fb968a96c,\n            0x43acf088910c3322f7da5c2d0a2211,\n            0x58b7e2d7b7f268eb990fc464defe90,\n            0x2be3be3a4fedf432a98dda3c220958,\n            0xf9156a2bafb69ef294360c25d22759,\n            0x1b7e6763845875a1886345b4ee8940,\n            0xa40ae130e9762120841e1930873975,\n            0x2d883272a543cf8fd0cdfbecc94367,\n            0x715a88142fec78eb472f6684cd942d,\n            0xdd302fea25298915e2db875f6ab621,\n            0x6612ced822df9c00c368466391fe23,\n            0x48acb5eea186585b9c24443397b8fb,\n            0x53fc8b5e2bedc30b81f632371f1e8a,\n            0x7ef026faeb670fc44abfeee192bec6,\n            0xb07bb4bfb19773a319052ffac029a9,\n            0x81c21e9e538893cb04debde34bc02e,\n            0x823427edc35eaf0a2f5d493318db74,\n            0xbad02f47a1ff078d0103affc3792b1,\n            0xe297eab3b3edafcf99c2ba52cb8424,\n            0x3e7e575d40629a07980fa71996e807,\n            0xc27a,\n        ],\n        [\n            0x54aba16603d87dec091aa1821ce3b0,\n            0x8f6a9c560fe4f4d5fb83999853bd1c,\n            0x4d9b41fcc316ae6b1a9bb7eefa7713,\n            0x623fcac3bfa0aa5f932acc0f0f28c9,\n            0xb29eca15e9ba6d9bbcd2ac543f9558,\n            0x43689b8fe8bbb48269c2fb3b03a624,\n            0xc6f8b1cbefb4cb7d2eec1bc951808b,\n            0x4074a7837f67403f497133fee0e29,\n            0x536ba97fd34f92aae1e0354bc17db0,\n            0x784c203e438e43ddddae491fd0c0e9,\n            0xf41ae3f5f5060d212bcc7c4ee71d2,\n            0xe539fd3b39a98377199ae15d165ea,\n            0xd13be03a50e9694c4c84e2541303ed,\n            0x38136b8771f62c9778e1f812ceadec,\n            0x23bea00ab5c2efafde2c8ea46673a8,\n            0xa4d3523ba9389da81c46adde61fece,\n            0xadb3053369bb6e7233eea01174caa2,\n            0x68995fa9f373e420a9f6e6fa2329e7,\n            0x38f83f074d3ee3674e7336349a0d4e,\n            0xd9ecb79c431b08a695e4808a636a48,\n            0x3498c268b8bb4936c9e8f9fa73da27,\n            0x123ed10b1358dde62125f1191fc922,\n            0xa5a412e4c3c73dbb5cba119c48af2d,\n            0xbee3217219d507e4a6ff74b9b9eee5,\n            0x2ee5efcaee7ca45ffcd85f10eeb21b,\n            0xb977bc65277e5723737f52905837bc,\n            0xd1fd3aa6e7717bceccf73b04c8bf2d,\n            0x7964355f3acd61d2408ce20a964740,\n            0xfc2e76f487e6ca0e6bcadbf9d3801d,\n            0xfb0ea20336cf95062efb880d82cab5,\n            0x6884d9ca882e37df90f8f5c603b7b1,\n            0x9be945fc633fcc0dd2b84ec1debef5,\n            0x8d834cbc2c9a3aa4a85a3994bc569d,\n            0x7055060035c122b095b75e6de37d48,\n            0x150fc2,\n        ],\n    );\n    let signature: RuntimeBigNum<35, 4096> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xdeb402a595b32a248fd427ed84c743,\n            0x75f1b3656f2eb61c3e4164375052cf,\n            0x33aa80998875b8b48263611706607b,\n            0xd9c80be79f586e80ac3af1a8d5ea53,\n            0xf0b116fd85546f206ae49d041d0223,\n            0x406a397f56e62863aa7b6ed1429dec,\n            0xd7e0bbd7ac00a419f3fef0098e904f,\n            0x303665df221e3691c84c6502d1b807,\n            0xb2ce0e36df94a88f8120b53a0bcb84,\n            0xe8e55991ffdb5b731b77cb249991d1,\n            0xbaa946c3acb9696a4d416d86291fd2,\n            0x7746a7486603b1cfb5dc5f800ee409,\n            0x567d9470319309142967b699404091,\n            0x5ee6fbb50c8637805ec6c7780a9e0a,\n            0x32bf8a51bc178cdb664ca911c857ea,\n            0xe928146ddcc0865c10215611955243,\n            0x5d12083acd2e3a1b7f7313dea0b894,\n            0x8620f5ba7615db0a3285c735813a73,\n            0x7b84f0e392902e84792c4879f48fbc,\n            0x1437df81c544ea4d7fdb020bfb7fcb,\n            0x09fb8b36d3a58a6a5fff27c1664d97,\n            0xef70898862d34d8f2d7c1bb1fb8103,\n            0xd24f625196ae71e3064596a7dd80f3,\n            0xeb646b3e5958fc213a0f711a5c68c4,\n            0x7f57a200d1894a07a33610c56a543d,\n            0xa54baf3fadfe09f896d2f2c88df7e7,\n            0xb605122c80e189236329bbf9ad6c9f,\n            0xa6ac0b396215d0f50b3705cd08788a,\n            0xdad6946e3c27a25ab484a0ed338788,\n            0x874dfd4c3723c395217a881b93283a,\n            0xf5ac1d98a50f59a40db4e2d4864a07,\n            0x9d6ed5b0d10028a291588a3359cd32,\n            0x7d8b67a1bad38a5ec750dc27bc8ae0,\n            0xa2ddd25f61adf97f5e2e8a0ef99ba8,\n            0x2244,\n        ],\n    };\n    assert(verify_sha256_pss(sha256_hash, signature, 4096));\n}\n\n// doesnt work yet need better method\n// #[test]\nfn test_verify_sha256_pss_1964() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    let params: BigNumParams<17, 1964> = BigNumParams::new(\n        false,\n        [\n            0xe62ce4613d178a8af9154a28c804c9,\n            0xe9c80bb90ee949aa26d5554f5b7323,\n            0xa823c32e66dce57c7617704f092c82,\n            0x8b7eee92772e414a23ee9dd5ef843a,\n            0x6590039cb62daeea7a96faf674175c,\n            0x2905f4400973a1442181701f12f30d,\n            0xc5f0a37929848a5fbe070ddc915dee,\n            0x2ada1490d935ef7700c43dc2565539,\n            0xa99acb3b526abb963d71e527c17e2e,\n            0xf9d79341476659c231dc93313fb440,\n            0x168d8abd0528fa146b6401034358f2,\n            0x6d7386e7d66bec5392a463d34f7b5d,\n            0xeb245f85612f76849ce32cd5f9011e,\n            0x2d171c40f36f34eeb17b4643c7f9e2,\n            0xd582273cf4c5fb0c195ccac1526478,\n            0x1df64d0a6c95698d34c1b16640ad92,\n            0xdd8e29ecdc0,\n        ],\n        [\n            0x7893f159b37d9b4d46e77e420d3315,\n            0x97913c7ea0db74a13b793686c0fa,\n            0x3eddab2786c599e1fcd99b06a1b151,\n            0x6f922b72a2386f483d35d5017ef102,\n            0xcf9ede21d4ca70a045ccdac95c1e9,\n            0xbe7c0cc79955f74eafb82000838e19,\n            0x26bd0fc82288bde663f5dff239b55b,\n            0x95f857821550531b848b454b4f7dc7,\n            0xef08d9d594fbf1547ac00a03323aa7,\n            0x3bb9f9263bfe85814477c58de4934d,\n            0x214887fd218e3573f1aae50917a816,\n            0xe6f1abc97678adf59b2008645d8802,\n            0x28dd35618649eef12941db95081242,\n            0xc13764316f70444e7120b6ae5088f5,\n            0xefb1aba9512f1b2c88db34a4938796,\n            0x6aed9a143fb37749eca936a60ae25c,\n            0x127ccb9568ee6,\n        ],\n    );\n\n    let signature: RuntimeBigNum<17, 1964> = RuntimeBigNum {\n        params,\n        limbs: [\n            0x37c3a3f915fb9e787412d457ec4a63,\n            0xd60918c40b6c50bcc8afa8d1ea754f,\n            0x98eec8d63deeb22eca4f9d15b7e935,\n            0xc841db8c9930934dcc8171a5fee4b4,\n            0x3341bdb96ed1d734959e257dbc85ca,\n            0x32701c7557ca04c15cd9e18f45d37b,\n            0xefd3dae979f5a920654dc7a3ea2277,\n            0x1d6724ec09b112e8776c115874a53f,\n            0xf403d3593f85b9ab421fa26bf99298,\n            0x04e85e3628f4c3fc254a92c56ba0b8,\n            0x975bb82f1fe3c3d1656e098682f69f,\n            0x0ad72d532c8e6e17398d918c360973,\n            0xc4ba256370766c633e77d4102a8919,\n            0xc4d3bb32bc889aca394bef272d3f71,\n            0x5d56778a3d1ad3117471d4060761b0,\n            0x5fd5d71fec72f615614d6347935f35,\n            0x09ab8ab67e43,\n        ],\n    };\n    assert(verify_sha256_pss(sha256_hash, signature, 4096));\n\n}\n\n#[test]\nfn test_verify_sha256_pss_jwt() {\n    let hash: [u8; 32] = [\n        190, 196, 184, 50, 102, 89, 57, 43, 211, 245, 140, 168, 170, 163, 80, 128, 25, 139, 25, 68,\n        239, 215, 154, 164, 148, 234, 47, 212, 6, 140, 157, 110,\n    ];\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x83e879145bffccbe4d783abeca8999,\n            0xb7d9868f5b915b43f6c6a8193a1a4f,\n            0x67f95badedef107f0998ab3d52961e,\n            0x7dcc9780ac8d71c6b49bbfeca25f0,\n            0xf9fdced289a3d4f62830681be65b50,\n            0x986aa8fe98888e9f609af97515b036,\n            0xd494bc65f4608849a6ed8cf5cb82ed,\n            0x18ca508b8353e676387d22667e4adb,\n            0x9d3fcb816b4763099ccbb7416a7ad,\n            0xcfd89fee1ffcfa5f2243c92e3908b7,\n            0xcaf320fbb34158238b41042f9c6386,\n            0xb3df0cd5dee269ecec61b342880c59,\n            0x2134236dc67b59df001cac48181625,\n            0x536d424ce3dcaf2b3c15eba3ceb98,\n            0x7c6532647de2f025c4245c4a816ea9,\n            0x1ca6b6ac38706f61dd460c53293c88,\n            0x812b9256f612815edb22ec614a6c89,\n            0xc9,\n        ],\n        [\n            0x9ec08341171d384b92ed35848dac43,\n            0xaa5e7059598102ad1d99f33e533781,\n            0x894978a6e54a780efd6c579b74dd3f,\n            0x9531219036eb346dc4d2f142d9aeb3,\n            0x2d67220edac65500daea360896b937,\n            0x72393de3ce76a185b8d5fe4efeb301,\n            0x2e5a676dc2d3d971ead0a1a8127ff1,\n            0xbb92e11f4b88fb1f478a8e5fcc8a63,\n            0x978205931de77dc276cbffcfa9ab06,\n            0x3f0074f27a70de9b87b38923c5d26f,\n            0x315d3964500ad7da70267bebb13aed,\n            0xee04558c06aced97c3375cb93ae624,\n            0xcaf9c90ec5317baf27dabd3f3a6018,\n            0x453a832dd0cf10c2e7669123ffdabe,\n            0xc6c46372e3eda40f2582e2e9902867,\n            0xcdb6b9ecb85a01524cbe4cee82a2c2,\n            0xbbaa5920d526e092f29b41b1c629e1,\n            0x1453,\n        ],\n    );\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0x2e3f7f3a3b7d89cbf680adcee4f039,\n            0xcca286445a216e1c110416099710f3,\n            0x0684d04d7773fbff2223360e314f47,\n            0x1342e7d3f7cadd18ba5f0ed57b1e54,\n            0xe5347fc80630780900cffe3d20cb7d,\n            0xda578cadd719f2a38f505d54c46203,\n            0x4a729fdd97383a0e32b5e8f671c833,\n            0x810ea2ce9ace9bd072bd3b221c9b62,\n            0xc565d6bff72c8501a729ecab2aee3b,\n            0xe042b627c4e6b4cc6ab4ca0ababaaa,\n            0x8e707750c71a4f9f0b9d9389b61826,\n            0x850297f956c58dafb6bf4f7bb049fa,\n            0x32c51e7454edae060725c509d9a48c,\n            0xbe2f1df6227e67dc61e6ab82bc501f,\n            0xea17c90cc7053bbb94ddfac6b1a405,\n            0x6c6eaada9c24dfa1a476c3718f6735,\n            0x0134b376c64ba2a79a086061573792,\n            0x22,\n        ],\n    };\n\n    assert(verify_sha256_pss(hash, signature, 2048));\n}\n","path":"/Users/ianbrighton/Documents/Mach34/open_banking/noir_rsa_pss/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["__mul","__compute_quadratic_expression_with_borrow_flags","build_msg_block","attach_len_to_msg_block","build_msg_block","directive_integer_quotient","directive_to_radix"]}